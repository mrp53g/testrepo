{"version":3,"sources":["FormValidator.js","App.js","serviceWorker.js","index.js"],"names":["FormValidator","validations","Object","classCallCheck","this","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","method","validator","apply","concat","toConsumableArray","validWhen","message","isValid","map","objectSpread","App","_this","possibleConstructorReturn","getPrototypeOf","call","passwordMatch","confirmation","password","handleInputChange","event","preventDefault","setState","defineProperty","target","name","value","handleFormSubmit","validate","submitted","lineIdComp","document","getElementById","trim","length","localStorage","setItem","backBtn","click","alert","full_name","email","phone","password_confirmation","react_default","a","createElement","className","class","href","htmlFor","id","contract_id","bu_ids","type","placeholder","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7141a7f.chunk.js","sourcesContent":["import validator from 'validator';\n\nclass FormValidator {\n  constructor(validations) {\n    this.validations = validations;\n  }\n\n  validate(state) {\n    let validation = this.valid();\n\n    // for each validation rule\n    this.validations.forEach(rule => {\n\n      if (!validation[rule.field].isInvalid) {\n       \n        const field_value = state[rule.field].toString();\n        const args = rule.args || [];\n        const validation_method = \n              typeof rule.method === 'string' ?\n              validator[rule.method] : \n              rule.method\n              \n     \n        if(validation_method(field_value, ...args, state) !== rule.validWhen) {\n          validation[rule.field] = { isInvalid: true, message: rule.message }\n          validation.isValid = false;\n        }\n      }\n    });\n\n    return validation;\n  }\n\n  valid() {\n    const validation = {}\n\n    this.validations.map(rule => (\n      validation[rule.field] = { isInvalid: false, message: '' }\n    ));\n\n    return { isValid: true, ...validation };\n  }\n}\n\nexport default FormValidator;","import React, {Component} from 'react';\nimport FormValidator from './FormValidator';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.validator = new FormValidator([\n      { \n        field: 'full_name', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Enter full name.' \n      },\n      { \n        field: 'email', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Enter your email address.' \n      },\n      { \n        field: 'email',\n        method: 'isEmail', \n        validWhen: true, \n        message: 'Enter valid email address.'\n      },\n      { \n        field: 'phone', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Enter a phone number.'\n      },\n      {\n        field: 'phone', \n        method: 'matches',\n        args: [/^\\(?\\d\\d\\d\\)? ?\\d\\d\\d-?\\d\\d\\d\\d$/],\n        validWhen: true, \n        message: 'Enter valid phone number.'\n      },\n      { \n        field: 'password', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Enter password.'\n      },\n      { \n        field: 'password_confirmation', \n        method: 'isEmpty', \n        validWhen: false, \n        message: 'Enter Password confirmation.'\n      },\n      { \n        field: 'password_confirmation', \n        method: this.passwordMatch,   // notice that we are passing a custom function here\n        validWhen: true, \n        message: 'Password and password confirmation do not match.'\n      }\n    ]);\n\n    this.state = {\n      full_name: '',\n      email: '',\n      phone: '',\n      password: '',\n      password_confirmation: '',\n      validation: this.validator.valid(),\n    }\n    this.submitted = false;\n  }\n    passwordMatch = (confirmation, state) => (state.password === confirmation)\n\n  handleInputChange = event => {\n    event.preventDefault();\n\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n    \n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    const validation = this.validator.validate(this.state);\n    this.setState({ validation });\n    this.submitted = true;\n\n    if (validation.isValid) {\n      //reaches here if form validates successfully...\n      /*localStorage.setItem(\"contract_id\", \"1234\");\n      var a = [\"EWS\", \"USIS\"];\n      localStorage.setItem(\"bu_ids\", a);*/\n\n      var lineIdComp = document.getElementById('return_contract_line_id');\n      //alert(lineIdComp.value);\n      if(lineIdComp.value != null &&  lineIdComp.value.trim().length > 0){\n          localStorage.setItem(\"line_id_from_template\", lineIdComp.value.trim());\n      }else{\n          localStorage.setItem(\"line_id_from_template\", null);\n      }\n      //alert(localStorage.line_id_from_template);\n      var backBtn = document.getElementById('b1_adf_ret');\n      if(backBtn != null){\n        backBtn.click();\n      }else{\n        alert('ADF Button not found');\n      }\n    }\n  }\n\n  \n  render() {\n    let validation = this.submitted ?this.validator.validate(this.state) : this.state.validation               \n\n    return (\n      <div className=\"container\" >\n      <div class=\"header-first\">\n        \n        <a target=\"top\" href=\"https://jsonworld.com\"><h2>jsonworld.com</h2></a>\n        <a target=\"top\" href=\"https://jsonworld.com/demo/form-validation-in-reactjs-application\"><p>Form Validation in React.js application</p></a>\n        \n      </div>      \n        <div className=\"row\">\n          <div className=\"col-md-4 col-md-offset-4\">\n          <form className=\"registrationForm\">\n        <h2>Registration form</h2>\n\n      <div >\n          <label htmlFor=\"contract_id\">Contract Id :  </label>\n          <label id=\"contract_id\"> {localStorage.contract_id} </label>\n          \n          \n        </div>\n        <div >\n          <label htmlFor=\"business_unit\">Business Unit :  </label>\n          <label id=\"business_unit\"> {localStorage.bu_ids} </label>\n          \n          \n        </div>\n\n        <div className={validation.email.isInvalid && 'has-error'}>\n          <label htmlFor=\"full_name\">Full Name</label>\n          <input type=\"string\" className=\"form-control\"\n            name=\"full_name\"\n            placeholder=\"Full Name\"\n            onChange={this.handleInputChange}\n          />\n          <span className=\"help-block\">{validation.full_name.message}</span>\n        </div>\n\n        \n\n        <div className={validation.email.isInvalid && 'has-error'}>\n          <label htmlFor=\"email\">Email address</label>\n          <input type=\"email\" className=\"form-control\"\n            name=\"email\"\n            placeholder=\"Email address\"\n            onChange={this.handleInputChange}\n          />\n          <span className=\"help-block\">{validation.email.message}</span>\n        </div>\n\n        <div className={validation.phone.isInvalid && 'has-error'}>\n          <label htmlFor=\"phone\">Phone(enter only 10 digit number)</label>\n          <input type=\"phone\" className=\"form-control\"\n            name=\"phone\"\n            placeholder=\"Phone Number\"\n            onChange={this.handleInputChange}\n          />\n          <span className=\"help-block\">{validation.phone.message}</span>\n        </div>\n\n        <div className={validation.password.isInvalid && 'has-error'}>\n          <label htmlFor=\"password\">Password</label>\n          <input type=\"password\" className=\"form-control\"\n            placeholder=\"Password\"\n            name=\"password\"\n            onChange={this.handleInputChange}\n          />\n          <span className=\"help-block\">{validation.password.message}</span>\n        </div>\n\n        <div className={validation.password_confirmation.isInvalid && 'has-error'}>\n          <label htmlFor=\"password_confirmation\">Confirm Password</label>\n          <input type=\"password\" className=\"form-control\"\n            placeholder=\"Confirm Password\"\n            name=\"password_confirmation\"\n            onChange={this.handleInputChange}\n          />\n          <span className=\"help-block\">{validation.password_confirmation.message}</span>\n        </div>\n\n        <div>\n          <label htmlFor=\"return_contract_line_id\">Contract Line Id</label>\n          <input type=\"string\" className=\"form-control\"\n            name=\"return_contract_line_id\" id=\"return_contract_line_id\"\n          />\n          \n        </div>\n\n        <button onClick={this.handleFormSubmit} className=\"btn btn-primary\">\n          Register\n        </button>\n      </form>\n          </div>\n        </div>\n      \n      </div>\n    )\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}